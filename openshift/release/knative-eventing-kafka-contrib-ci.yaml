---
apiVersion: v1
kind: Namespace
metadata:
  name: knative-sources
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-controller-manager
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eventing-sources-kafka-controller
  labels:
    contrib.eventing.knative.dev/release: devel
rules:
- apiGroups:
  - sources.knative.dev
  resources:
  - kafkasources
  - kafkasources/finalizers
  verbs: &everything
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - sources.knative.dev
  resources:
  - kafkasources/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - bindings.knative.dev
  resources:
  - kafkabindings
  - kafkabindings/finalizers
  verbs: &everything
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - bindings.knative.dev
  resources:
  - kafkabindings/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs: *everything
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs: *everything
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - create
  - update
  - list
  - watch
  - patch
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - leases
  verbs: *everything
- apiGroups:
    - "admissionregistration.k8s.io"
  resources:
    - "mutatingwebhookconfigurations"
    - "validatingwebhookconfigurations"
  verbs: &everything
    - "get"
    - "list"
    - "create"
    - "update"
    - "delete"
    - "patch"
    - "watch"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: eventing-contrib-kafka-source-observer
  labels:
    eventing.knative.dev/release: devel
    duck.knative.dev/source: "true"
rules:
  - apiGroups:
      - "sources.knative.dev"
    resources:
      - "kafkasources"
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eventing-sources-kafka-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller-addressable-resolver
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: addressable-resolver
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eventing-sources-kafka-controller-podspecable-binding
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
- kind: ServiceAccount
  name: kafka-controller-manager
  namespace: knative-sources
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: podspecable-binding
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    contrib.eventing.knative.dev/release: devel
    duck.knative.dev/binding: "true"
    knative.dev/crd-install: "true"
  name: kafkabindings.bindings.knative.dev
spec:
  group: bindings.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    - bindings
    kind: KafkaBinding
    plural: kafkabindings
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
    - name: BootstrapServers
      type: string
      JSONPath: ".spec.bootstrapServers"
    - name: Ready
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
    - name: Reason
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
    - name: Age
      type: date
      JSONPath: .metadata.creationTimestamp
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    contrib.eventing.knative.dev/release: devel
    eventing.knative.dev/source: "true"
    duck.knative.dev/source: "true"
    knative.dev/crd-install: "true"
  annotations:
    registry.knative.dev/eventTypes: |
      [
        { "type": "dev.knative.kafka.event" }
      ]
  name: kafkasources.sources.knative.dev
spec:
  group: sources.knative.dev
  names:
    categories:
    - all
    - knative
    - eventing
    - sources
    kind: KafkaSource
    plural: kafkasources
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
    - name: Topics
      type: string
      JSONPath: ".spec.topics"
    - name: BootstrapServers
      type: string
      JSONPath: ".spec.bootstrapServers"
    - name: Ready
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
    - name: Reason
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
    - name: Age
      type: date
      JSONPath: .metadata.creationTimestamp
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            bootstrapServers:
              type: array
              minLength: 1
            topics:
              type: array
              minLength: 1
            consumerGroup:
              type: string
            net:
              properties:
                sasl:
                  properties:
                    enable:
                      type: boolean
                    password:
                      properties:
                        secretKeyRef:
                          type: object
                      type: object
                    user:
                      properties:
                        secretKeyRef:
                          type: object
                      type: object
                  type: object
                tls:
                  properties:
                    caCert:
                      properties:
                        secretKeyRef:
                          type: object
                      type: object
                    cert:
                      properties:
                        secretKeyRef:
                          type: object
                      type: object
                    enable:
                      type: boolean
                    key:
                      properties:
                        secretKeyRef:
                          type: object
                      type: object
                  type: object
              type: object
            resources:
              properties:
                limits:
                  properties:
                    cpu:
                      type: string
                    memory:
                      type: string
                  type: object
                requests:
                  properties:
                    cpu:
                      type: string
                    memory:
                      type: string
                  type: object
              type: object
            serviceAccountName:
              type: string
            sink:
              anyOf:
              - type: object
                description: "the destination that should receive events."
                properties:
                  ref:
                    type: object
                    description: "a reference to a Kubernetes object from which to retrieve the target URI."
                    required:
                    - apiVersion
                    - kind
                    - name
                    properties:
                      apiVersion:
                        type: string
                        minLength: 1
                      kind:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                  uri:
                    type: string
                    description: "the target URI. If ref is provided, this must be relative URI reference."
              - type: object
                description: "DEPRECATED: a reference to a Kubernetes object from which to retrieve the target URI."
                required:
                - apiVersion
                - kind
                - name
                properties:
                  apiVersion:
                    type: string
                    minLength: 1
                  kind:
                    type: string
                    minLength: 1
                  name:
                    type: string
                    minLength: 1
                  uri:
                    type: string
                    description: "the target URI. If ref is provided, this must be relative URI reference."
          type: object
          required:
              - bootstrapServers
              - topics
              - consumerGroup
        status:
          properties:
            conditions:
              items:
                properties:
                  lastTransitionTime:
                    type: string
                  message:
                    type: string
                  reason:
                    type: string
                  severity:
                    type: string
                  status:
                    type: string
                  type:
                    type: string
                required:
                - type
                - status
                type: object
              type: array
            observedGeneration:
              format: int64
              type: integer
            sinkUri:
              type: string
          type: object
  version: v1alpha1
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-controller
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: devel
    control-plane: kafka-controller-manager
spec:
  selector:
    control-plane: kafka-controller-manager
  ports:
  - name: https-kafka
    port: 443
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-controller-manager
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: devel
    control-plane: kafka-controller-manager
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      control-plane: kafka-controller-manager
  template:
    metadata:
      labels: *labels
    spec:
      serviceAccountName: kafka-controller-manager
      containers:
      - name: manager
        image: image-registry.openshift-image-registry.svc:5000/knative-eventing/knative-eventing-contrib-kafka-source-controller:ci
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: METRICS_DOMAIN
          value: knative.dev/sources
        - name: CONFIG_OBSERVABILITY_NAME
          value: config-observability
        - name: CONFIG_LEADERELECTION_NAME
          value: config-leader-election-kafka
        - name: KAFKA_RA_IMAGE
          value: image-registry.openshift-image-registry.svc:5000/knative-eventing/knative-eventing-contrib-kafka-source-adapter:ci
        volumeMounts:
        resources:
          requests:
            cpu: 20m
            memory: 20Mi
        readinessProbe: &probe
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe: *probe
      serviceAccount: kafka-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  labels:
    role: webhook
    contrib.eventing.knative.dev/release: devel
  name: kafka-source-webhook
  namespace: knative-sources
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    control-plane: kafka-controller-manager
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: defaulting.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: kafkabindings.webhook.kafka.sources.knative.dev
  labels:
    samples.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: kafkabindings.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.kafka.sources.knative.dev
  labels:
    contrib.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: validation.webhook.kafka.sources.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: config.webhook.kafka.sources.knative.dev
  labels:
    serving.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-source-webhook
      namespace: knative-sources
  failurePolicy: Fail
  name: config.webhook.kafka.sources.knative.dev
  namespaceSelector:
    matchExpressions:
    - key: contrib.eventing.knative.dev/release
      operator: Exists
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-source-webhook-certs
  namespace: knative-sources
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-leader-election-kafka
  namespace: knative-sources
data:
  resourceLock: "leases"
  leaseDuration: "15s"
  renewDeadline: "10s"
  retryPeriod: "2s"
  _example: |
    resourceLock: "leases"
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "2s"
    enabledComponents: "kafka-controller"
---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-logging
  namespace: knative-sources
data:
  zap-logger-config: |
    {
      "level": "info",
      "development": false,
      "outputPaths": ["stdout"],
      "errorOutputPaths": ["stderr"],
      "encoding": "json",
      "encoderConfig": {
        "timeKey": "ts",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "msg",
        "stacktraceKey": "stacktrace",
        "lineEnding": "",
        "levelEncoder": "",
        "timeEncoder": "iso8601",
        "durationEncoder": "",
        "callerEncoder": ""
      }
    }
  loglevel.controller: "info"
  loglevel.webhook: "info"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability
  namespace: knative-sources
data:
  _example: |
    logging.enable-var-log-collection: false
    logging.fluentd-sidecar-image: k8s.gcr.io/fluentd-elasticsearch:v2.0.4
    logging.fluentd-sidecar-output-config: |
      <filter **>
        @type parser
        key_name log
        <parse>
          @type multi_format
          <pattern>
            format json
            time_key fluentd-time # fluentd-time is reserved for structured logs
            time_format %Y-%m-%dT%H:%M:%S.%NZ
          </pattern>
          <pattern>
            format none
            message_key log
          </pattern>
        </parse>
      </filter>
      <match **>
        @id elasticsearch
        @type elasticsearch
        @log_level info
        include_tag_key true
        host elasticsearch-logging.knative-monitoring
        port 9200
        logstash_format true
        <buffer>
          @type file
          path /var/log/fluentd-buffers/kubernetes.system.buffer
          flush_mode interval
          retry_type exponential_backoff
          flush_thread_count 2
          flush_interval 5s
          retry_forever
          retry_max_interval 30
          chunk_limit_size 2M
          queue_limit_length 8
          overflow_action block
        </buffer>
      </match>
    logging.revision-url-template: |
      http://localhost:8001/api/v1/namespaces/knative-monitoring/services/kibana-logging/proxy/app/kibana#/discover?_a=(query:(match:(kubernetes.labels.knative-dev%2FrevisionUID:(query:'${REVISION_UID}',type:phrase))))
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'
    metrics.backend-destination: prometheus
    metrics.request-metrics-backend-destination: prometheus
    metrics.stackdriver-project-id: "<your stackdriver project id>"
    metrics.allow-stackdriver-custom-metrics: "false"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-tracing
  namespace: knative-eventing
  labels:
    eventing.knative.dev/release: devel
    knative.dev/config-propagation: original
    knative.dev/config-category: eventing
data:
  _example: |
    backend: "none"
    zipkin-endpoint: "http://zipkin.istio-system.svc.cluster.local:9411/api/v2/spans"
    stackdriver-project-id: "my-project"
    debug: "false"
    sample-rate: "0.1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-addressable-resolver
  labels:
    contrib.eventing.knative.dev/release: devel
    duck.knative.dev/addressable: "true"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-channelable-manipulator
  labels:
    contrib.eventing.knative.dev/release: devel
    duck.knative.dev/channelable: "true"
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-ch-controller
  labels:
    contrib.eventing.knative.dev/release: devel
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
      - kafkachannels/status
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels/finalizers
    verbs:
      - update
  - apiGroups:
      - "" # Core API group.
    resources:
      - services
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
  - apiGroups:
      - "" # Core API group.
    resources:
      - services
    verbs: &everything
      - get
      - list
      - watch
      - create
      - patch
      - update
  - apiGroups:
      - "" # Core API Group.
    resources:
      - configmaps
    resourceNames:
      - kafka-ch-dispatcher
    verbs:
      - update
  - apiGroups:
      - "" # Core API Group.
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "" # Core API group.
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
      - deployments/status
    verbs: *everything
  - apiGroups:
      - "" # Core API group.
    resources:
      - serviceaccounts
    verbs: *everything
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - rolebindings
    verbs: *everything
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs: *everything
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-ch-controller
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-ch-dispatcher
  labels:
    contrib.eventing.knative.dev/release: devel
rules:
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels/status
    verbs:
      - get
      - update
      - patch
  - apiGroups:
      - "" # Core API group.
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - messaging.knative.dev
    resources:
      - kafkachannels
    verbs:
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "" # Core API Group.
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "coordination.k8s.io"
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - patch
      - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-ch-dispatcher
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kafka-webhook
  labels:
    contrib.eventing.knative.dev/release: devel
rules:
  - apiGroups:
      - ""
    resources:
      - "configmaps"
    verbs:
      - "get"
      - "list"
      - "watch"
  - apiGroups:
      - ""
    resources:
      - "secrets"
    verbs:
      - "get"
      - "create"
      - "list"
      - "watch"
      - "update"
  - apiGroups:
      - "apps"
    resources:
      - "deployments"
    verbs:
      - "get"
  - apiGroups:
      - "apps"
    resources:
      - "deployments/finalizers"
    verbs:
      - update
  - apiGroups:
      - "admissionregistration.k8s.io"
    resources:
      - "mutatingwebhookconfigurations"
      - "validatingwebhookconfigurations"
    verbs:
      - "get"
      - "list"
      - "create"
      - "update"
      - "delete"
      - "patch"
      - "watch"
  - apiGroups:
      - "messaging.knative.dev"
    resources:
      - "kafkachannels"
      - "kafkachannels/status"
    verbs:
      - "get"
      - "list"
      - "watch"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-ch-controller
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
  - kind: ServiceAccount
    name: kafka-ch-controller
    namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-ch-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-ch-dispatcher
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
  - kind: ServiceAccount
    name: kafka-ch-dispatcher
    namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-ch-dispatcher
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kafka-webhook
  labels:
    contrib.eventing.knative.dev/release: devel
subjects:
  - kind: ServiceAccount
    name: kafka-webhook
    namespace: knative-eventing
roleRef:
  kind: ClusterRole
  name: kafka-webhook
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: kafkachannels.messaging.knative.dev
  labels:
    contrib.eventing.knative.dev/release: devel
    knative.dev/crd-install: "true"
    messaging.knative.dev/subscribable: "true"
    duck.knative.dev/addressable: "true"
spec:
  group: messaging.knative.dev
  version: v1alpha1
  names:
    kind: KafkaChannel
    plural: kafkachannels
    singular: kafkachannel
    categories:
    - all
    - knative
    - messaging
    - channel
    shortNames:
    - kc
  scope: Namespaced
  subresources:
    status: {}
  additionalPrinterColumns:
    - name: Ready
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].status"
    - name: Reason
      type: string
      JSONPath: ".status.conditions[?(@.type==\"Ready\")].reason"
    - name: URL
      type: string
      JSONPath: .status.address.url
    - name: Age
      type: date
      JSONPath: .metadata.creationTimestamp
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            numPartitions:
              format: int32
              type: integer
              description: "Number of partitions of a Kafka topic."
            replicationFactor:
              format: int16
              type: integer
              description: "Replication factor of a Kafka topic."
            subscribable:
              type: object
              properties:
                subscribers:
                  type: array
                  description: "The list of subscribers that have expressed interest in receiving events from this channel."
                  items:
                    required:
                      - uid
                    properties:
                      ref:
                        type: object
                        required:
                          - namespace
                          - name
                          - uid
                        properties:
                          apiVersion:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                            minLength: 1
                          namespace:
                            type: string
                            minLength: 1
                          uid:
                            type: string
                            minLength: 1
                      uid:
                        type: string
                        minLength: 1
                      subscriberURI:
                        type: string
                        minLength: 1
                      replyURI:
                        type: string
                        minLength: 1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-kafka
  namespace: knative-eventing
data:
  bootstrapServers: REPLACE_WITH_CLUSTER_URL
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-leader-election-kafka
  namespace: knative-eventing
data:
  resourceLock: "leases"
  leaseDuration: "15s"
  renewDeadline: "10s"
  retryPeriod: "2s"
  _example: |
    resourceLock: "leases"
    leaseDuration: "15s"
    renewDeadline: "10s"
    retryPeriod: "2s"
    enabledComponents: "kafkachannel-dispatcher,kafkachannel-controller"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
    role: kafka-webhook
spec:
  ports:
    - name: https-webhook
      port: 443
      targetPort: 8443
  selector:
    role: kafka-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ch-controller
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      messaging.knative.dev/channel: kafka-channel
      messaging.knative.dev/role: controller
  template:
    metadata:
      labels: *labels
    spec:
      serviceAccountName: kafka-ch-controller
      containers:
        - name: controller
          image: image-registry.openshift-image-registry.svc:5000/knative-eventing/knative-eventing-contrib-kafka-channel-controller:ci
          env:
            - name: CONFIG_LOGGING_NAME
              value: config-logging
            - name: METRICS_DOMAIN
              value: knative.dev/eventing
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LEADERELECTION_NAME
              value: config-leader-election-kafka
            - name: DISPATCHER_IMAGE
              value: image-registry.openshift-image-registry.svc:5000/knative-eventing/knative-eventing-contrib-kafka-channel-dispatcher:ci
          ports:
            - containerPort: 9090
              name: metrics
          volumeMounts:
            - name: config-logging
              mountPath: /etc/config-logging
      volumes:
        - name: config-logging
          configMap:
            name: config-logging
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: defaulting.webhook.kafka.messaging.knative.dev
  labels:
    contrib.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  failurePolicy: Fail
  name: defaulting.webhook.kafka.messaging.knative.dev
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: validation.webhook.kafka.messaging.knative.dev
  labels:
    contrib.eventing.knative.dev/release: devel
webhooks:
- admissionReviewVersions:
  - v1beta1
  clientConfig:
    service:
      name: kafka-webhook
      namespace: knative-eventing
  failurePolicy: Fail
  name: validation.webhook.kafka.messaging.knative.dev
---
apiVersion: v1
kind: Secret
metadata:
  name: messaging-webhook-certs
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-webhook
  namespace: knative-eventing
  labels:
    contrib.eventing.knative.dev/release: devel
spec:
  replicas: 1
  selector:
    matchLabels: &labels
      app: kafka-webhook
      role: kafka-webhook
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels: *labels
    spec:
      serviceAccountName: kafka-webhook
      containers:
      - name: kafka-webhook
        terminationMessagePolicy: FallbackToLogsOnError
        image: image-registry.openshift-image-registry.svc:5000/knative-eventing/knative-eventing-contrib-kafka-channel-webhook:ci
        env:
          - name: SYSTEM_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CONFIG_LOGGING_NAME
            value: config-logging
          - name: METRICS_DOMAIN
            value: knative.dev/eventing
          - name: WEBHOOK_NAME
            value: kafka-webhook
        ports:
          - containerPort: 9090
            name: metrics
        readinessProbe: &probe
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe: *probe
